#include "chainparams.h"
#include "consensus/merkle.h"
#include "util.h"
#include "validation.h"
#include "hash.h"
#include "arith_uint256.h"
#include <iostream>

static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)
{
    CMutableTransaction txNew;
    txNew.nVersion = 1;
    txNew.vin.resize(1);
    txNew.vout.resize(1);
    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));
    txNew.vout[0].nValue = genesisReward;
    txNew.vout[0].scriptPubKey = genesisOutputScript;

    CBlock genesis;
    genesis.nTime    = nTime;
    genesis.nBits    = nBits;
    genesis.nNonce   = nNonce;
    genesis.nVersion = nVersion;
    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));
    genesis.hashPrevBlock.SetNull();
    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);
    return genesis;
}

void MineGenesisBlock(CBlock &genesis)
{
    arith_uint256 bnTarget;
    bnTarget.SetCompact(genesis.nBits);
    uint256 hash;
    do {
        ++genesis.nNonce;
        hash = genesis.GetHash();
    } while (UintToArith256(hash) > bnTarget);
    
    std::cout << "Bloque génesis minado:" << std::endl
              << "Nonce: " << genesis.nNonce << std::endl
              << "Hash: " << hash.ToString() << std::endl;
}

class CMuntadaParams : public CChainParams {
public:
    CMuntadaParams() {
        strNetworkID = "main";
        consensus.nSubsidyHalvingInterval = 262500;  // Halving cada ~2.5 años
        consensus.BIP34Height = 1;
        consensus.powLimit = uint256S("00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60;  // 2 semanas
        consensus.nPowTargetSpacing = 5 * 60;  // Bloques cada 5 minutos
        consensus.nPowDifficultyAdjustmentInterval = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;
        
        // Configuración del bloque génesis
        const char* pszTimestamp = "Muntada Blockchain - Neocoin 2025";
        const CScript genesisOutputScript = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
        genesis = CreateGenesisBlock(pszTimestamp, genesisOutputScript, 1735689600, 0, 0x1e0ffff0, 1, 2100000 * COIN);
        
        MineGenesisBlock(genesis);
        consensus.hashGenesisBlock = genesis.GetHash();

        // Parámetros de red
        vSeeds.emplace_back("seed1.muntada.org");
        vSeeds.emplace_back("seed2.muntada.org");
        
        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,53);  // Direcciones: N
        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,40); // Contratos: M
        bech32_hrp = "muntada";
    }
};
