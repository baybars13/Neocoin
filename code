#include "chainparams.h"
#include "consensus/merkle.h"
#include "util.h"
#include "validation.h"
#include "hash.h"
#include "arith_uint256.h"
#include <iostream>

static CBlock CreateGenesisBlock(const char* pszTimestamp, const CScript& genesisOutputScript, uint32_t nTime, uint32_t nNonce, uint32_t nBits, int32_t nVersion, const CAmount& genesisReward)
{
    CMutableTransaction txNew;
    txNew.nVersion = 1;
    txNew.vin.resize(1);
    txNew.vout.resize(1);
    txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << std::vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));
    txNew.vout[0].nValue = genesisReward;
    txNew.vout[0].scriptPubKey = genesisOutputScript;

    CBlock genesis;
    genesis.nTime    = nTime;
    genesis.nBits    = nBits;
    genesis.nNonce   = nNonce;
    genesis.nVersion = nVersion;
    genesis.vtx.push_back(MakeTransactionRef(std::move(txNew)));
    genesis.hashPrevBlock.SetNull();
    genesis.hashMerkleRoot = BlockMerkleRoot(genesis);
    return genesis;
}

void MineGenesisBlock(CBlock &genesis)
{
    arith_uint256 bnTarget;
    bnTarget.SetCompact(genesis.nBits);
    uint256 hash = genesis.GetHash();
    while (UintToArith256(hash) > bnTarget)
    {
        ++genesis.nNonce;
        hash = genesis.GetHash();
    }
    std::cout << "Genesis block mined!" << std::endl;
    std::cout << "Nonce: " << genesis.nNonce << std::endl;
    std::cout << "Hash: " << hash.GetHex() << std::endl;
}

class CMainParams : public CChainParams {
public:
    CMainParams() {
        strNetworkID = "main";
        consensus.nSubsidyHalvingInterval = 262500; // Cada 2.5 años aproximadamente
        consensus.BIP34Height = 0;
        consensus.BIP34Hash = uint256();
        consensus.powLimit = uint256S("00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // 2 semanas
        consensus.nPowTargetSpacing = 5 * 60; // 5 minutos por bloque
        consensus.fPowAllowMinDifficultyBlocks = false;
        consensus.fPowNoRetargeting = false;
        consensus.nRuleChangeActivationThreshold = 1916; // 95% de 2016 bloques
        consensus.nMinerConfirmationWindow = 2016;
        consensus.nPowDifficultyAdjustmentInterval = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;

        // Crear bloque génesis
        const char* pszTimestamp = "NEOCOIN Genesis Block - 2023";
        const CScript genesisOutputScript = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
        genesis = CreateGenesisBlock(pszTimestamp, genesisOutputScript, 1683000000, 0, 0x1d00ffff, 1, 2100000 * COIN);
        
        // Minar el bloque génesis
        MineGenesisBlock(genesis);

        consensus.hashGenesisBlock = genesis.GetHash();
        consensus.BIP34Hash = consensus.hashGenesisBlock;

        // Checkpoints
        checkpointData = {
            {
                { 0, consensus.hashGenesisBlock },
                // Añadir más checkpoints a medida que la cadena crezca
            }
        };

        // Semillas DNS
        vSeeds.clear();
        vSeeds.emplace_back("seed1.neocoin.org");
        vSeeds.emplace_back("seed2.neocoin.org");

        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,0);
        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,5);
        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,128);
        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x88, 0xB2, 0x1E};
        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x88, 0xAD, 0xE4};

        bech32_hrp = "neo";
    }
};

static CMainParams mainParams;

class CTestNetParams : public CChainParams {
public:
    CTestNetParams() {
        strNetworkID = "test";
        consensus.nSubsidyHalvingInterval = 131250; // Mitad que en mainnet
        consensus.BIP34Height = 0;
        consensus.BIP34Hash = uint256();
        consensus.powLimit = uint256S("00000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
        consensus.nPowTargetTimespan = 14 * 24 * 60 * 60; // 2 semanas
        consensus.nPowTargetSpacing = 5 * 60; // 5 minutos por bloque
        consensus.fPowAllowMinDifficultyBlocks = true;
        consensus.fPowNoRetargeting = false;
        consensus.nRuleChangeActivationThreshold = 1512; // 75% de 2016 bloques
        consensus.nMinerConfirmationWindow = 2016;
        consensus.nPowDifficultyAdjustmentInterval = consensus.nPowTargetTimespan / consensus.nPowTargetSpacing;

        // Crear bloque génesis de testnet
        const char* pszTimestamp = "NEOCOIN Testnet Genesis Block - 2023";
        const CScript genesisOutputScript = CScript() << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f") << OP_CHECKSIG;
        genesis = CreateGenesisBlock(pszTimestamp, genesisOutputScript, 1683000000, 0, 0x1d00ffff, 1, 2100000 * COIN);
        
        // Minar el bloque génesis de testnet
        MineGenesisBlock(genesis);

        consensus.hashGenesisBlock = genesis.GetHash();
        consensus.BIP34Hash = consensus.hashGenesisBlock;

        vSeeds.clear();
        vSeeds.emplace_back("testnet-seed1.neocoin.org");
        vSeeds.emplace_back("testnet-seed2.neocoin.org");

        base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1,111);
        base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1,196);
        base58Prefixes[SECRET_KEY] =     std::vector<unsigned char>(1,239);
        base58Prefixes[EXT_PUBLIC_KEY] = {0x04, 0x35, 0x87, 0xCF};
        base58Prefixes[EXT_SECRET_KEY] = {0x04, 0x35, 0x83, 0x94};

        bech32_hrp = "tneo";
    }
};

static CTestNetParams testNetParams;
